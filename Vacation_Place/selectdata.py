# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'selectdata.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pymongo
from PyQt5 import QtCore, QtGui, QtWidgets
import dns
from PyQt5.QtWidgets import QTableWidgetItem
from PyQt5.QtWidgets import (QApplication, QMainWindow)

class Ui_selectdatapage(object):
    def __init__(self):
        self.tern = ''
        self.typed = ''
        self.province = ''
        self.opentime = ''

    def setupUi(self, selectdatapage):
        selectdatapage.setObjectName("selectdatapage")
        selectdatapage.resize(799, 476)
        self.lblthern = QtWidgets.QLabel(selectdatapage)
        self.lblthern.setGeometry(QtCore.QRect(260, 10, 300, 61))
        font = QtGui.QFont()
        font.setFamily("Itim")
        font.setPointSize(20)
        self.lblthern.setFont(font)
        self.lblthern.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lblthern.setText("")
        self.lblthern.setAlignment(QtCore.Qt.AlignCenter)
        self.lblthern.setObjectName("lblthern")
        self.cmbType = QtWidgets.QComboBox(selectdatapage)
        self.cmbType.setGeometry(QtCore.QRect(300, 360, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Itim")
        self.cmbType.setFont(font)
        self.cmbType.setObjectName("cmbType")
        self.type = ['attractions', 'restaurant', 'resting_place']
        self.cmbType.addItems(self.type)
        self.cmbProvince = QtWidgets.QComboBox(selectdatapage)
        self.cmbProvince.setGeometry(QtCore.QRect(80, 360, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Itim")
        self.cmbProvince.setFont(font)
        self.cmbProvince.setObjectName("cmbProvince")
        self.butEnter = QtWidgets.QPushButton(selectdatapage)
        self.butEnter.setGeometry(QtCore.QRect(450, 410, 111, 31))
        self.butEnter.setStyleSheet("QPushButton{\n"
                                  "background-color: #ddd;\n"
                                  "border: none;\n"
                                  "color: black;\n"
                                  "transition: 0.3s;\n"
                                  "}\n"
                                  "QPushButton:hover{\n"
                                  "transition-delay:3s;\n"
                                  "background-color:#4CAF50;\n"
                                  "color: rgb(255, 255, 255);\n"
                                  "}")
        self.butEnter.setObjectName("butEnter")
        self.butBack = QtWidgets.QPushButton(selectdatapage)
        self.butBack.setGeometry(QtCore.QRect(10, 20, 71, 31))
        self.butBack.setObjectName("butBack")
        self.butBack.setStyleSheet("QPushButton{\n"
                                  "background-color: #ddd;\n"
                                  "border: none;\n"
                                  "color: black;\n"
                                  "transition: 0.3s;\n"
                                  "}\n"
                                  "QPushButton:hover{\n"
                                  "transition-delay:3s;\n"
                                  "background-color:#4CAF50;\n"
                                  "color: rgb(255, 255, 255);\n"
                                  "}")
        self.tbwshow = QtWidgets.QTableWidget(selectdatapage)
        self.tbwshow.setGeometry(QtCore.QRect(80, 70, 631, 281))
        font = QtGui.QFont()
        font.setFamily("Itim")
        font.setPointSize(12)
        self.tbwshow.setFont(font)
        self.tbwshow.setObjectName("tbwshow")
        self.tbwshow.setColumnCount(0)
        self.tbwshow.setRowCount(0)
        self.cmbTime = QtWidgets.QComboBox(selectdatapage)
        self.cmbTime.setGeometry(QtCore.QRect(520, 360, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Itim")
        self.cmbTime.setFont(font)
        self.cmbTime.setObjectName("cmbTime")
        time = ['8.00', '9.00', '10.00', '11.00', '12.00']
        self.cmbTime.addItems(time)
        self.butEnter_2 = QtWidgets.QPushButton(selectdatapage)
        self.butEnter_2.setGeometry(QtCore.QRect(230, 410, 111, 31))
        self.butEnter_2.setStyleSheet("QPushButton{\n"
                                  "background-color: #ddd;\n"
                                  "border: none;\n"
                                  "color: black;\n"
                                  "text-align: center;\n"
                                  "transition: 0.3s;\n"
                                  "}\n"
                                  "QPushButton:hover{\n"
                                  "transition-delay:3s;\n"
                                  "background-color:#4CAF50;\n"
                                  "color: rgb(255, 255, 255);\n"
                                  "}")
        self.butEnter_2.setObjectName("butEnter_2")

        self.butBack.clicked.connect(self.backtoMain)
        self.cmbType.activated.connect(self.setcmdtime)
        self.retranslateUi(selectdatapage)
        self.butEnter.clicked.connect(self.data)
        self.butEnter.clicked.connect(self.gotoshow)
        self.butEnter_2.clicked.connect(self.data)
        self.butEnter_2.clicked.connect(self.gotorecomment)
        self.thiswindow = selectdatapage


        self.retranslateUi(selectdatapage)
        QtCore.QMetaObject.connectSlotsByName(selectdatapage)

    def display(self, tern):
        connectMongodb = 'mongodb+srv://Kornwara:2tIbDeNWUF7Yjswi@cluster0.ezb5a.mongodb.net/<dbname>?retryWrites=true&w=majority'
        with pymongo.MongoClient(connectMongodb) as conn:
            db = conn.get_database('VacationPlace')
            have = True
            where = {'$and': [{'ภาค': tern}, {'attractions': {'$exists': have}}]}
            count = db.Province.count_documents(where)
            cursor = db.Province.find(where)

        self.tbwshow.setRowCount(count)
        self.tbwshow.setColumnCount(4)

        header1 = QtWidgets.QTableWidgetItem('Province')
        header2 = QtWidgets.QTableWidgetItem('attractions')
        header3 = QtWidgets.QTableWidgetItem('restaurant')
        header4 = QtWidgets.QTableWidgetItem('hotel')

        self.tbwshow.setHorizontalHeaderItem(0, header1)
        self.tbwshow.setHorizontalHeaderItem(1, header2)
        self.tbwshow.setHorizontalHeaderItem(2, header3)
        self.tbwshow.setHorizontalHeaderItem(3, header4)

        row = 0
        for i in cursor:
            self.tbwshow.setItem(row, 0, QTableWidgetItem("{}".format(i['Province'])))
            self.tbwshow.setItem(row, 1, QTableWidgetItem("{}".format(i['attractions'].__len__())))
            self.tbwshow.setItem(row, 2, QTableWidgetItem("{}".format(i['restaurant'].__len__())))
            self.tbwshow.setItem(row, 3, QTableWidgetItem("{}".format(i['resting_place'].__len__())))
            row += 1

    def settext(self, tern):
        self.tern = tern
        self.lblthern.setText(tern)

    def setcmdtime(self):
        if (self.cmbType.currentText() == 'attractions' or self.cmbType.currentText() == 'restaurant'):
            self.cmbTime.show()
        else:
            self.cmbTime.hide()

    def setcmbProvince(self, tern):
        setcmb = []
        connectMongodb = 'mongodb+srv://Kornwara:2tIbDeNWUF7Yjswi@cluster0.ezb5a.mongodb.net/<dbname>?retryWrites=true&w=majority'
        with pymongo.MongoClient(connectMongodb)as conn:
            have = True
            where = {'$and': [{'ภาค': tern}, {'attractions': {'$exists': have}}]}
            db = conn.get_database('VacationPlace')
            Found = db.Province.find(where)
            for i in Found:
                setcmb.append(i['Province'])
            self.cmbProvince.addItems(setcmb)

    def gotorecomment(self):
        from recommenttest import Window
        self.window = QtWidgets.QMainWindow()
        self.ui= Window()
        self.ui.setaug(self.tern,self.typed,self.province)
        self.ui.show()


    def backtoMain(self):
        from MainMeni import Ui_MainWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self.window)
        self.window.show()
        self.thiswindow.hide()

    def data(self):
        self.typed = self.cmbType.currentText()
        self.province = self.cmbProvince.currentText()
        self.opentime = self.cmbTime.currentText()

    def gotoshow(self):
        from showdata import Ui_Showdatapage
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_Showdatapage()
        self.ui.setupUi(self.window)
        self.ui.settext(self.tern, self.typed, self.province, self.opentime)
        self.ui.display()
        self.window.show()
        self.thiswindow.hide()

    def retranslateUi(self, selectdatapage):
        _translate = QtCore.QCoreApplication.translate
        selectdatapage.setWindowTitle(_translate("selectdatapage", "selectdata"))
        self.butEnter.setText(_translate("selectdatapage", "Enter"))
        self.butBack.setText(_translate("selectdatapage", "Back"))
        self.butEnter_2.setText(_translate("selectdatapage", "Recommended"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    selectdatapage = QtWidgets.QWidget()
    ui = Ui_selectdatapage()
    ui.setupUi(selectdatapage)
    selectdatapage.show()
    sys.exit(app.exec_())
